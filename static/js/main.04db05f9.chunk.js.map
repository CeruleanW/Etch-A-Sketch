{"version":3,"sources":["serviceWorker.js","components/Board.jsx","components/InsideColorPicker.jsx","components/CustomColorButton.jsx","components/CustomSizeButton.jsx","components/Menu.jsx","components/Footer.jsx","components/App.jsx","index.js"],"names":["Boolean","window","location","hostname","match","Board","props","renderGrids","bind","handleColorChange","handleClear","state","grids","tempGrids","this","cell","isColored","gridColor","setState","onClear","position","hoveredColor","mode","Math","floor","random","toString","customizedColor","shouldBeClear","gridsPerRow","sqrt","length","rows","cells","k","i","push","key","className","onColorChange","Component","Grid","handleHover","onMouseOver","style","backgroundColor","InsideColorPicker","displayColorPicker","color","r","g","b","a","handleClick","handleClose","handleChange","rgb","onChange","styles","reactCSS","width","height","borderRadius","background","swatch","padding","boxShadow","display","cursor","popover","zIndex","cover","top","right","bottom","left","onClick","React","CustomColorButton","sendColor","sendMode","event","onMode","onColor","hex","CustomSizeButton","useState","setWidth","setHeight","id","type","minLength","maxLength","size","value","e","parseInt","target","h","w","onSizeChange","Menu","handleMode","sendClearCommand","handleCustomSize","getColor","sendClear","runningMode","gridNumber","Array","keyValue","n","initBoard","Footer","href","App","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.04db05f9.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n//props: mode, shouldBeClear, onClear, customizedColor, grids\r\nexport class Board extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.renderGrids = this.renderGrids.bind(this);\r\n        this.handleColorChange = this.handleColorChange.bind(this);\r\n        this.handleClear = this.handleClear.bind(this);\r\n        this.state = {\r\n            grids: this.props.grids,\r\n        }\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        if (props.grids.length !== state.grids.length) {\r\n          return {\r\n            grids: props.grids,\r\n          };\r\n        }\r\n        return null;\r\n      }\r\n\r\n    //reset all grids\r\n    handleClear() {\r\n        let tempGrids = this.state.grids;\r\n        for (let cell of tempGrids) {\r\n            cell.isColored = false;\r\n            cell.gridColor = '';\r\n        }\r\n        this.setState({grids: tempGrids});\r\n        this.props.onClear();\r\n    }\r\n\r\n    //change the color of the hovered grid\r\n    handleColorChange(position) {\r\n        let tempGrids = this.state.grids;\r\n        let hoveredColor;\r\n        switch (this.props.mode) {\r\n            case 'BW':\r\n                hoveredColor = 'black';\r\n                break;\r\n            case 'rainbow':\r\n                hoveredColor = '#' + Math.floor(Math.random()*16777215).toString(16);\r\n                break;\r\n            case 'customColor':\r\n                hoveredColor = this.props.customizedColor;\r\n                break;\r\n            default:\r\n                hoveredColor = 'black';\r\n        }\r\n        (tempGrids[position]).isColored = true;\r\n        tempGrids[position].gridColor = hoveredColor;\r\n        this.setState({\r\n            grids: tempGrids\r\n        });\r\n    }\r\n\r\n    //take grids(2D array), return the corresponding components\r\n    renderGrids() {\r\n        if (this.props.shouldBeClear) {\r\n            this.handleClear();\r\n        }\r\n\r\n        let gridsPerRow = Math.floor(Math.sqrt(this.state.grids.length*4/3));\r\n\r\n        let rows = [];\r\n        let cells = [];\r\n        let k = 1;\r\n        for (let i=0; i<this.state.grids.length; i++) {\r\n            if (i%gridsPerRow === 0 && i!==0) {\r\n                rows.push(<div key={'Row' + (k++)} className='board-row'>{cells}</div>);\r\n                cells = [];\r\n            }\r\n            cells.push(<Grid key={i} position={this.state.grids[i].position} isColored={this.state.grids[i].isColored} onColorChange={this.handleColorChange} gridColor={this.state.grids[i].gridColor}/>)\r\n        }\r\n        return rows;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='board'>\r\n                {this.renderGrids()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass Grid extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleHover = this.handleHover.bind(this);\r\n    }\r\n\r\n    handleHover() {\r\n        if (!this.props.isColored)\r\n            this.props.onColorChange(this.props.position);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='grid' onMouseOver={this.handleHover} \r\n                style={{\r\n                    backgroundColor: this.props.gridColor\r\n                }}\r\n                ></div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Board","import React from 'react';\r\nimport reactCSS from 'reactcss';\r\nimport { SketchPicker } from 'react-color';\r\n\r\n\r\nexport class InsideColorPicker extends React.Component {\r\n    state = {\r\n        displayColorPicker: false,\r\n        color: {\r\n            r: '241',\r\n            g: '112',\r\n            b: '19',\r\n            a: '1',\r\n        },\r\n    };\r\n    handleClick = () => {\r\n        this.setState({ displayColorPicker: !this.state.displayColorPicker });\r\n    };\r\n    handleClose = () => {\r\n        this.setState({ displayColorPicker: false });\r\n    };\r\n    handleChange = (color) => {\r\n        this.setState({ color: color.rgb });\r\n        this.props.onChange(color);\r\n    };\r\n    render() {\r\n        const styles = reactCSS({\r\n            'default': {\r\n                color: {\r\n                    width: '24px',\r\n                    height: '24px',\r\n                    borderRadius: '2px',\r\n                    background: `rgba(${this.state.color.r}, ${this.state.color.g}, ${this.state.color.b}, ${this.state.color.a})`,\r\n                },\r\n                swatch: {\r\n                    padding: '5px',\r\n                    background: '#fff',\r\n                    borderRadius: '1px',\r\n                    boxShadow: '0 0 0 1px rgba(0,0,0,.1)',\r\n                    display: 'inline-block',\r\n                    cursor: 'pointer',\r\n                },\r\n                popover: {\r\n                    position: 'absolute',\r\n                    zIndex: '2',\r\n                },\r\n                cover: {\r\n                    position: 'fixed',\r\n                    top: '0px',\r\n                    right: '0px',\r\n                    bottom: '0px',\r\n                    left: '0px',\r\n                },\r\n            },\r\n        });\r\n        return (\r\n        <div className='inside-color-picker'>\r\n            <div style={styles.swatch} onClick={this.handleClick} >\r\n                <div style={styles.color} />\r\n            </div>\r\n            {this.state.displayColorPicker ? <div style={styles.popover}>\r\n                <div style={styles.cover} onClick={this.handleClose} />\r\n                <SketchPicker color={this.state.color} onChange={this.handleChange} />\r\n            </div> : null}\r\n        </div>);\r\n    }\r\n}\r\n\r\nexport default InsideColorPicker","import React, { Component } from 'react';\r\nimport { InsideColorPicker } from './InsideColorPicker';\r\n\r\nconst buttonId = 'customColor';\r\n\r\nclass CustomColorButton extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.sendColor = this.sendColor.bind(this);\r\n        this.sendMode = this.sendMode.bind(this);\r\n        this.state = {\r\n            displayColorPicker: false,\r\n        };\r\n    }\r\n    \r\n\r\n    handleClick = () => {\r\n        this.setState({ displayColorPicker: !this.state.displayColorPicker })\r\n    };\r\n\r\n    handleClose = () => {\r\n        this.setState({ displayColorPicker: false })\r\n    };\r\n\r\n\r\n    sendMode(event) {\r\n        this.props.onMode(buttonId);\r\n    }\r\n\r\n    sendColor(color, event) {\r\n        this.props.onColor(color.hex);\r\n    }\r\n\r\n    render() {\r\n        const popover = {\r\n            position: 'absolute',\r\n            zIndex: '2',\r\n        }\r\n\r\n        const cover = {\r\n            position: 'fixed',\r\n            top: '0px',\r\n            right: '0px',\r\n            bottom: '0px',\r\n            left: '0px',\r\n        }\r\n\r\n        return (\r\n            <div className='custom-color-container'>\r\n                <InsideColorPicker onChange={this.sendColor} />\r\n                <button onClick={this.sendMode}>Custom Color Mode</button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CustomColorButton","import React from 'react';\r\nimport { useState } from 'react';\r\n//send: width * height      props: onSizeChange\r\nexport function CustomSizeButton(props) {\r\n    const [width, setWidth] = useState(32);\r\n    const [height, setHeight] = useState(24);\r\n    const sendSize = () => {\r\n        props.onSizeChange(width * height);\r\n    };\r\n\r\n    const setStateFromHeight = (e) => {\r\n        setHeight(parseInt(e.target.value));\r\n        let w = Math.floor((e.target.value / 3) * 4);\r\n        setWidth(parseInt(w));\r\n    };\r\n\r\n    const setStateFromWidth = (e) => {\r\n        setWidth(parseInt(e.target.value));\r\n        let h = Math.floor((e.target.value / 4) * 3);\r\n        setHeight(parseInt(h));\r\n    };\r\n\r\n    return (<div id='custom-container'>\r\n        <input id='custom-width' type=\"text\" minLength=\"4\" maxLength=\"8\" size=\"1\" value={width} onChange={setStateFromWidth}></input>\r\n        <span> &#215; </span>\r\n        <input id='custom-height' type=\"text\" minLength=\"4\" maxLength=\"8\" size=\"1\" value={height} onChange={setStateFromHeight}></input>\r\n        <button value='custom' className='buttons' onClick={sendSize}>Custom Size</button>\r\n    </div>);\r\n}\r\n","import React, { Component } from 'react';\r\nimport Board from './Board';\r\nimport CustomColorButton from './CustomColorButton';\r\nimport { CustomSizeButton } from './CustomSizeButton';\r\n\r\nclass Menu extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleMode = this.handleMode.bind(this);\r\n        this.sendClearCommand = this.sendClearCommand.bind(this);\r\n        this.handleClear = this.handleClear.bind(this);\r\n        this.handleCustomSize = this.handleCustomSize.bind(this);\r\n        this.getColor = this.getColor.bind(this);\r\n        this.state = {\r\n             sendClear: false,\r\n             runningMode: 'BW',\r\n             customizedColor: '#F17013',\r\n             gridNumber: 768,\r\n        };\r\n    }\r\n\r\n    //input: int    return a 2D array as the board\r\n    initBoard(gridNumber) {\r\n        let grids = new Array(gridNumber);\r\n        let keyValue = 0;\r\n        for (let i=0; i<grids.length; i++) {\r\n            grids[i] = {\r\n                position: keyValue,\r\n                isColored: false,\r\n                gridColor: ''\r\n            };\r\n            keyValue++;\r\n        }\r\n        return grids;\r\n    }\r\n\r\n    handleMode(id) {\r\n        if (this.state.runningMode !== id) {\r\n            this.sendClearCommand();\r\n            this.setState({runningMode: id});\r\n        }\r\n    }\r\n\r\n    sendClearCommand() {\r\n        this.setState({sendClear: true});\r\n    }\r\n\r\n    handleClear() {\r\n        this.setState({sendClear: false});\r\n    }\r\n\r\n    handleCustomSize(n) {\r\n        this.sendClearCommand();\r\n        this.setState({gridNumber: n});\r\n    }\r\n\r\n    getColor(color) {\r\n        this.setState({customizedColor: color});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='main'>\r\n                <div className='menu'>\r\n                    <button id='clear' className='buttons' onClick={this.sendClearCommand}>Clear</button>\r\n                    <button id='rainbow' className='buttons' onClick={this.handleMode.bind(this, 'rainbow')}>Rainbow Mode</button>\r\n                    <button id='BW' className='buttons' onClick={this.handleMode.bind(this, 'BW')}>Black/White Mode</button>\r\n                    <CustomColorButton onColor={this.getColor} onMode={this.handleMode} />\r\n                    <CustomSizeButton onSizeChange={this.handleCustomSize}/>\r\n                </div>\r\n                <Board mode={this.state.runningMode} shouldBeClear={this.state.sendClear} onClear={this.handleClear} grids={this.initBoard(this.state.gridNumber)} customizedColor={this.state.customizedColor}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Menu","import React, { Component } from 'react'\r\n\r\nexport class Footer extends Component {\r\n    render() {\r\n        return (\r\n            <footer>\r\n                <div className=\"footer-copyright\" > &copy; Developed by \r\n                    <a href=\"https://github.com/WindforceYang\" className=\"white-text my-name\" > Yi Yang</a>. \r\n                </div > \r\n            </footer>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Footer\r\n","import React from 'react';\r\nimport Menu from './Menu';\r\nimport Footer from './Footer';\r\n\r\nconst App = () => {\r\n  return (\r\n    <div>\r\n      <Menu />\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}